# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

option('--enable-simple', help='Enable simple')

# Setting MOZ_WITH_ENV in the environment has the same effect as passing
# --enable-with-env.
option('--enable-with-env', env='MOZ_WITH_ENV', help='Enable with env')

# Optional values
option('--enable-values', nargs='*', help='Enable values')

# Everything supported in the Option class is supported in option(). Assume
# the tests of the Option class are extensive about this.

# Alternatively to --enable/--disable, there also is --with/--without. The
# difference is semantic only. Behavior is the same as --enable/--disable.

# When the option name starts with --disable/--without, the default is for
# the option to be enabled.
option('--without-thing', help='Build without thing')

# A --enable/--with option with a default of False is equivalent to a
# --disable/--without option. This can be used to change the defaults
# depending on e.g. the target or the built application.
option('--with-stuff', default=False, help='Build with stuff')

# Other kinds of arbitrary options are also allowed. This is effectively
# equivalent to --enable/--with, with no possibility of --disable/--without.
option('--option', env='MOZ_OPTION', help='Option')

# It is also possible to pass options through the environment only.
option(env='CC', nargs=1, help='C Compiler')

# Call the function when the --enable-simple option is processed, with its
# OptionValue as argument.
@depends('--enable-simple')
def simple(simple):
    if simple:
        set_config('ENABLED_SIMPLE', simple)

# There can be multiple functions depending on the same option.
@depends('--enable-simple')
def simple(simple):
    set_config('SIMPLE', simple)

@depends('--enable-with-env')
def with_env(with_env):
    set_config('WITH_ENV', with_env)

# It doesn't matter if the dependency is on --enable or --disable
@depends('--disable-values')
def with_env2(values):
    set_config('VALUES', values)

# It is possible to @depends on environment-only options.
@depends('CC')
def is_gcc(cc):
    return cc and 'gcc' in cc[0]

@depends(is_gcc)
def is_gcc_check(is_gcc):
    set_config('IS_GCC', is_gcc)

# It is possible to depend on the result from another function.
# The input argument is a dict fed with the elements the function implied.
@depends(with_env2)
def with_env3(values):
    set_config('VALUES2', values['VALUES'])

# @depends functions can also return results for use as input to another
# @depends.
@depends(with_env3)
def with_env4(values):
    return values['VALUES2']

@depends(with_env4)
def with_env5(values):
    set_config('VALUES3', values)

# The result from @depends functions can also be used as input to options.
# The result must be returned, not implied. The function must also depend
# on --help.
@depends('--enable-simple', '--help')
def simple(simple, help):
    return 'simple' if simple else 'not-simple'

option('--with-returned-default', default=simple, help='Returned default')

@depends('--with-returned-default')
def default(value):
    set_config('DEFAULTED', value)

# @depends functions can also declare that some extra options are implied.
# Those options need to be defined _after_ the function, and they mustn't
# appear on the command line or the environment with conflicting values.
@depends('--enable-values')
def values(values):
    if values:
        imply_option('--enable-implied')
        imply_option(values.format('--with-implied-values'))
        imply_option(values.format('WITH_IMPLIED_ENV'))

option('--enable-implied', help='Implied')

option('--with-implied-values', nargs='*', help='Implied values')

option(env='WITH_IMPLIED_ENV', nargs='*', help='Implied env')

@depends('--enable-implied')
def implied(value):
    set_config('IMPLIED', value)

@depends('--with-implied-values')
def implied(values):
    set_config('IMPLIED_VALUES', values)

@depends('WITH_IMPLIED_ENV')
def implied(values):
    set_config('IMPLIED_ENV', values)

@depends('--enable-values', '--help')
def choices(values, help):
    if len(values):
        return {
            'alpha': ('a', 'b', 'c'),
            'numeric': ('0', '1', '2'),
        }.get(values[0])

option('--returned-choices', choices=choices, help='Choices')

@depends('--returned-choices')
def returned_choices(values):
    set_config('CHOICES', values)

# All options must be referenced by some @depends function.
# It is possible to depend on multiple options/functions
@depends('--without-thing', '--with-stuff', with_env4, '--option')
def remainder(*args):
    set_config('REMAINDER', args)

# It is possible to include other files to extend the configuration script.
include('included.configure')

# It is also possible for the include file path to come from the result of a
# @depends function. That function needs to depend on '--help' like for option
# defaults and choices.
option('--enable-include', nargs=1, help='Include')
@depends('--enable-include', '--help')
def include_path(path, help):
    return path[0] if path else None

include(include_path)

# @advanced functions are allowed to import modules and have access to
# the standard builtins instead of restricted ones. The order of the decorators
# matter: @advanced needs to appear last.
option('--with-advanced', nargs='?', help='Advanced')
@depends('--with-advanced')
@advanced
def with_advanced(value):
    if value:
        from mozbuild.configure.options import OptionValue
        set_config('ADVANCED', isinstance(value, OptionValue))

# Trying to import without @advanced will fail at runtime.
@depends('--with-advanced')
def with_advanced(value):
    if len(value) and value[0] == 'break':
        from mozbuild.configure.options import OptionValue
        set_config('ADVANCED', isinstance(value, OptionValue))

# A limited set of functions from os.path are exposed to non @advanced
# functions.
@depends('--with-advanced')
def with_advanced(value):
    if len(value):
        set_config('IS_FILE', os.path.isfile(value[0]))

# An @advanced function can still import the full set.
@depends('--with-advanced')
@advanced
def with_advanced(value):
    if len(value):
        import os.path
        set_config('HAS_GETATIME', hasattr(os.path, 'getatime'))

@depends('--with-advanced')
@advanced
def with_advanced(value):
    if len(value):
        set_config('HAS_GETATIME2', hasattr(os.path, 'getatime'))
