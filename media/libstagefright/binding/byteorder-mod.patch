diff --git a/media/libstagefright/binding/mp4parse/src/byteorder/mod.rs b/media/libstagefright/binding/mp4parse/src/byteorder/mod.rs
index a25bab6..13db30a 100644
--- a/media/libstagefright/binding/mp4parse/src/byteorder/mod.rs
+++ b/media/libstagefright/binding/mp4parse/src/byteorder/mod.rs
@@ -36,24 +36,17 @@ assert_eq!(wtr, vec![5, 2, 0, 3]);
 ```
 */
 
-#![crate_name = "byteorder"]
 #![doc(html_root_url = "http://burntsushi.net/rustdoc/byteorder")]
 
-#![cfg_attr(not(feature = "std"), no_std)]
-
 #![deny(missing_docs)]
 
-#[cfg(feature = "std")]
-extern crate core;
-
-use core::mem::transmute;
-use core::ptr::copy_nonoverlapping;
+use std::mem::transmute;
+use std::ptr::copy_nonoverlapping;
 
-#[cfg(feature = "std")]
-pub use new::{ReadBytesExt, WriteBytesExt};
+pub use byteorder::new::{ReadBytesExt, WriteBytesExt};
 
-#[cfg(feature = "std")]
-mod new;
+// Re-export new so gecko can build us as a mod instead of a crate.
+pub mod new;
 
 #[inline]
 fn extend_sign(val: u64, nbytes: usize) -> i64 {
@@ -300,7 +293,7 @@ pub type NativeEndian = BigEndian;
 
 macro_rules! read_num_bytes {
     ($ty:ty, $size:expr, $src:expr, $which:ident) => ({
-        assert!($size == ::core::mem::size_of::<$ty>());
+        assert!($size == ::std::mem::size_of::<$ty>());
         assert!($size <= $src.len());
         let mut data: $ty = 0;
         unsafe {
diff --git a/media/libstagefright/binding/mp4parse/src/byteorder/new.rs b/media/libstagefright/binding/mp4parse/src/byteorder/new.rs
index b5f3770..b32f97b 100644
--- a/media/libstagefright/binding/mp4parse/src/byteorder/new.rs
+++ b/media/libstagefright/binding/mp4parse/src/byteorder/new.rs
@@ -1,6 +1,6 @@
 use std::io::{self, Result};
 
-use ByteOrder;
+use byteorder::ByteOrder;
 
 /// Extends `Read` with methods for reading numbers. (For `std::io`.)
 ///
