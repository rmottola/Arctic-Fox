# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


# Generates a test program and attempts to compile it. In case of failure, the
# resulting check will return None. If the test program succeeds, it will return
# the output of the test program.
# - `includes` are the includes (as file names) that will appear at the top of
#   the generated test program.
# - `body` is the code that will appear in the main function of the generated
#   test program. `return 0;` is appended to the function body automatically.
# - `language` is the language selection, so that the appropriate compiler is
#   used.
# - `flags` are the flags to be passed to the compiler, in addition to `-c`.
# - `check_msg` is the message to be printed to accompany compiling the test
#   program.
@template
@imports('textwrap')
def try_compile(includes=None, body='', language='C++', flags=None, check_msg=None):
    includes = includes or []
    source_lines = ['#include <%s>' % f for f in includes]
    source = '\n'.join(source_lines) + '\n'
    source += textwrap.dedent('''\
        int
        main(void)
        {
        %s
          ;
          return 0;
        }
    ''' % body)
    flags = flags or []
    flags.append('-c')

    if check_msg:
        def checking_fn(fn):
            return checking(check_msg, callback=lambda r: r is not None)(fn)
    else:
        def checking_fn(fn):
            return fn

    @depends(cxx_compiler, c_compiler)
    @checking_fn
    def check(cxx_info, c_info):
        info = {
            'C': c_info,
            'C++': cxx_info,
        }[language]
        return try_invoke_compiler(info.wrapper + [info.compiler] + info.flags,
                                   language, source, flags,
                                   onerror=lambda: None)
    return check
