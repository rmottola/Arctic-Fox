/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * This header file lists up all event messages and their values.
 * Before including this header file, you should define
 * NS_EVENT_MESSAGE(aMessage, aValue)
 */

NS_EVENT_MESSAGE(NS_EVENT_NULL,         0)

// This is a dummy event message for all event listener implementation in
// EventListenerManager.
NS_EVENT_MESSAGE(NS_EVENT_ALL,          1)

NS_EVENT_MESSAGE(NS_WINDOW_START,       100)
// Widget may be destroyed
NS_EVENT_MESSAGE(NS_XUL_CLOSE,          NS_WINDOW_START + 1)

NS_EVENT_MESSAGE(NS_KEY_PRESS,          NS_WINDOW_START + 31)
NS_EVENT_MESSAGE(NS_KEY_UP,             NS_WINDOW_START + 32)
NS_EVENT_MESSAGE(NS_KEY_DOWN,           NS_WINDOW_START + 33)

NS_EVENT_MESSAGE(NS_KEY_BEFORE_DOWN,    NS_WINDOW_START + 34)
NS_EVENT_MESSAGE(NS_KEY_AFTER_DOWN,     NS_WINDOW_START + 35)
NS_EVENT_MESSAGE(NS_KEY_BEFORE_UP,      NS_WINDOW_START + 36)
NS_EVENT_MESSAGE(NS_KEY_AFTER_UP,       NS_WINDOW_START + 37)

NS_EVENT_MESSAGE(NS_RESIZE_EVENT,       NS_WINDOW_START + 60)
NS_EVENT_MESSAGE(NS_SCROLL_EVENT,       NS_WINDOW_START + 61)

// A plugin was clicked or otherwise focused. NS_PLUGIN_ACTIVATE should be
// used when the window is not active. NS_PLUGIN_FOCUS should be used when
// the window is active. In the latter case, the dispatcher of the event
// is expected to ensure that the plugin's widget is focused beforehand.
NS_EVENT_MESSAGE(NS_PLUGIN_ACTIVATE,    NS_WINDOW_START + 62)
NS_EVENT_MESSAGE(NS_PLUGIN_FOCUS,       NS_WINDOW_START + 63)

NS_EVENT_MESSAGE(NS_OFFLINE,            NS_WINDOW_START + 64)
NS_EVENT_MESSAGE(NS_ONLINE,             NS_WINDOW_START + 65)

// NS_BEFORERESIZE_EVENT used to be here (NS_WINDOW_START + 66)

// Indicates that the user is either idle or active
NS_EVENT_MESSAGE(NS_MOZ_USER_IDLE,      NS_WINDOW_START + 67)
NS_EVENT_MESSAGE(NS_MOZ_USER_ACTIVE,    NS_WINDOW_START + 68)

NS_EVENT_MESSAGE(NS_LANGUAGECHANGE,     NS_WINDOW_START + 70)

NS_EVENT_MESSAGE(NS_MOUSE_MESSAGE_START, 300)
NS_EVENT_MESSAGE(NS_MOUSE_MOVE,         NS_MOUSE_MESSAGE_START)
NS_EVENT_MESSAGE(NS_MOUSE_BUTTON_UP,    NS_MOUSE_MESSAGE_START + 1)
NS_EVENT_MESSAGE(NS_MOUSE_BUTTON_DOWN,  NS_MOUSE_MESSAGE_START + 2)
NS_EVENT_MESSAGE(NS_MOUSE_ENTER_WIDGET, NS_MOUSE_MESSAGE_START + 22)
NS_EVENT_MESSAGE(NS_MOUSE_EXIT_WIDGET,  NS_MOUSE_MESSAGE_START + 23)
NS_EVENT_MESSAGE(NS_MOUSE_DOUBLECLICK,  NS_MOUSE_MESSAGE_START + 24)
NS_EVENT_MESSAGE(NS_MOUSE_CLICK,        NS_MOUSE_MESSAGE_START + 27)
NS_EVENT_MESSAGE(NS_MOUSE_ACTIVATE,     NS_MOUSE_MESSAGE_START + 30)
NS_EVENT_MESSAGE(NS_MOUSE_OVER,         NS_MOUSE_MESSAGE_START + 31)
NS_EVENT_MESSAGE(NS_MOUSE_OUT,          NS_MOUSE_MESSAGE_START + 32)
NS_EVENT_MESSAGE(NS_MOUSE_MOZHITTEST,   NS_MOUSE_MESSAGE_START + 33)
NS_EVENT_MESSAGE(NS_MOUSEENTER,         NS_MOUSE_MESSAGE_START + 34)
NS_EVENT_MESSAGE(NS_MOUSELEAVE,         NS_MOUSE_MESSAGE_START + 35)
NS_EVENT_MESSAGE(NS_MOUSE_MOZLONGTAP,   NS_MOUSE_MESSAGE_START + 36)

// Pointer spec events
NS_EVENT_MESSAGE(NS_POINTER_EVENT_START,  4400)
NS_EVENT_MESSAGE(NS_POINTER_MOVE,         NS_POINTER_EVENT_START)
NS_EVENT_MESSAGE(NS_POINTER_UP,           NS_POINTER_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_POINTER_DOWN,         NS_POINTER_EVENT_START + 2)
NS_EVENT_MESSAGE(NS_POINTER_OVER,         NS_POINTER_EVENT_START + 22)
NS_EVENT_MESSAGE(NS_POINTER_OUT,          NS_POINTER_EVENT_START + 23)
NS_EVENT_MESSAGE(NS_POINTER_ENTER,        NS_POINTER_EVENT_START + 24)
NS_EVENT_MESSAGE(NS_POINTER_LEAVE,        NS_POINTER_EVENT_START + 25)
NS_EVENT_MESSAGE(NS_POINTER_CANCEL,       NS_POINTER_EVENT_START + 26)
NS_EVENT_MESSAGE(NS_POINTER_GOT_CAPTURE,  NS_POINTER_EVENT_START + 27)
NS_EVENT_MESSAGE(NS_POINTER_LOST_CAPTURE, NS_POINTER_EVENT_START + 28)

NS_EVENT_MESSAGE(NS_CONTEXTMENU_MESSAGE_START, 500)
NS_EVENT_MESSAGE(NS_CONTEXTMENU,        NS_CONTEXTMENU_MESSAGE_START)

NS_EVENT_MESSAGE(NS_STREAM_EVENT_START, 1100)
NS_EVENT_MESSAGE(NS_LOAD,               NS_STREAM_EVENT_START)
NS_EVENT_MESSAGE(NS_PAGE_UNLOAD,        NS_STREAM_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_HASHCHANGE,         NS_STREAM_EVENT_START + 2)
NS_EVENT_MESSAGE(NS_IMAGE_ABORT,        NS_STREAM_EVENT_START + 3)
NS_EVENT_MESSAGE(NS_LOAD_ERROR,         NS_STREAM_EVENT_START + 4)
NS_EVENT_MESSAGE(NS_POPSTATE,           NS_STREAM_EVENT_START + 5)
NS_EVENT_MESSAGE(NS_BEFORE_PAGE_UNLOAD, NS_STREAM_EVENT_START + 6)
NS_EVENT_MESSAGE(NS_PAGE_RESTORE,       NS_STREAM_EVENT_START + 7)
NS_EVENT_MESSAGE(NS_READYSTATECHANGE,   NS_STREAM_EVENT_START + 8)
 
NS_EVENT_MESSAGE(NS_FORM_EVENT_START,   1200)
NS_EVENT_MESSAGE(NS_FORM_SUBMIT,        NS_FORM_EVENT_START)
NS_EVENT_MESSAGE(NS_FORM_RESET,         NS_FORM_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_FORM_CHANGE,        NS_FORM_EVENT_START + 2)
NS_EVENT_MESSAGE(NS_FORM_SELECTED,      NS_FORM_EVENT_START + 3)
NS_EVENT_MESSAGE(NS_FORM_INVALID,       NS_FORM_EVENT_START + 4)

//Need separate focus/blur notifications for non-native widgets
NS_EVENT_MESSAGE(NS_FOCUS_EVENT_START,  1300)
NS_EVENT_MESSAGE(NS_FOCUS_CONTENT,      NS_FOCUS_EVENT_START)
NS_EVENT_MESSAGE(NS_BLUR_CONTENT,       NS_FOCUS_EVENT_START + 1)

NS_EVENT_MESSAGE(NS_DRAGDROP_EVENT_START, 1400)
NS_EVENT_MESSAGE(NS_DRAGDROP_ENTER,     NS_DRAGDROP_EVENT_START)
NS_EVENT_MESSAGE(NS_DRAGDROP_OVER,      NS_DRAGDROP_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_DRAGDROP_EXIT,      NS_DRAGDROP_EVENT_START + 2)
NS_EVENT_MESSAGE(NS_DRAGDROP_DRAGDROP,  NS_DRAGDROP_EVENT_START + 3)
NS_EVENT_MESSAGE(NS_DRAGDROP_GESTURE,   NS_DRAGDROP_EVENT_START + 4)
NS_EVENT_MESSAGE(NS_DRAGDROP_DRAG,      NS_DRAGDROP_EVENT_START + 5)
NS_EVENT_MESSAGE(NS_DRAGDROP_END,       NS_DRAGDROP_EVENT_START + 6)
NS_EVENT_MESSAGE(NS_DRAGDROP_START,     NS_DRAGDROP_EVENT_START + 7)
NS_EVENT_MESSAGE(NS_DRAGDROP_DROP,      NS_DRAGDROP_EVENT_START + 8)
NS_EVENT_MESSAGE(NS_DRAGDROP_LEAVE,     NS_DRAGDROP_EVENT_START + 9)

// Events for popups
NS_EVENT_MESSAGE(NS_XUL_EVENT_START,    1500)
NS_EVENT_MESSAGE(NS_XUL_POPUP_SHOWING,  NS_XUL_EVENT_START)
NS_EVENT_MESSAGE(NS_XUL_POPUP_SHOWN,    NS_XUL_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_XUL_POPUP_HIDING,   NS_XUL_EVENT_START + 2)
NS_EVENT_MESSAGE(NS_XUL_POPUP_HIDDEN,   NS_XUL_EVENT_START + 3)
// NS_XUL_COMMAND used to be here       (NS_XUL_EVENT_START + 4)
NS_EVENT_MESSAGE(NS_XUL_BROADCAST,      NS_XUL_EVENT_START + 5)
NS_EVENT_MESSAGE(NS_XUL_COMMAND_UPDATE, NS_XUL_EVENT_START + 6)

// Scroll events
NS_EVENT_MESSAGE(NS_MOUSE_SCROLL_START, 1600)
NS_EVENT_MESSAGE(NS_MOUSE_SCROLL,       NS_MOUSE_SCROLL_START)
NS_EVENT_MESSAGE(NS_MOUSE_PIXEL_SCROLL, NS_MOUSE_SCROLL_START + 1)

NS_EVENT_MESSAGE(NS_SCROLLPORT_START,     1700)
NS_EVENT_MESSAGE(NS_SCROLLPORT_UNDERFLOW, NS_SCROLLPORT_START)
NS_EVENT_MESSAGE(NS_SCROLLPORT_OVERFLOW,  NS_SCROLLPORT_START + 1)

NS_EVENT_MESSAGE(NS_MUTATION_START,                    1800)
NS_EVENT_MESSAGE(NS_MUTATION_SUBTREEMODIFIED,          NS_MUTATION_START)
NS_EVENT_MESSAGE(NS_MUTATION_NODEINSERTED,             NS_MUTATION_START + 1)
NS_EVENT_MESSAGE(NS_MUTATION_NODEREMOVED,              NS_MUTATION_START + 2)
NS_EVENT_MESSAGE(NS_MUTATION_NODEREMOVEDFROMDOCUMENT,  NS_MUTATION_START + 3)
NS_EVENT_MESSAGE(NS_MUTATION_NODEINSERTEDINTODOCUMENT, NS_MUTATION_START + 4)
NS_EVENT_MESSAGE(NS_MUTATION_ATTRMODIFIED,             NS_MUTATION_START + 5)
NS_EVENT_MESSAGE(NS_MUTATION_CHARACTERDATAMODIFIED,    NS_MUTATION_START + 6)
NS_EVENT_MESSAGE(NS_MUTATION_END,                      NS_MUTATION_START + 6)

NS_EVENT_MESSAGE(NS_USER_DEFINED_EVENT, 2000)
 
// composition events
NS_EVENT_MESSAGE(NS_COMPOSITION_EVENT_START,  2200)
NS_EVENT_MESSAGE(NS_COMPOSITION_START,        NS_COMPOSITION_EVENT_START)
// NS_COMPOSITION_END is the message for DOM compositionend event.
// This event should NOT be dispatched from widget if NS_COMPOSITION_COMMIT
// is available.
NS_EVENT_MESSAGE(NS_COMPOSITION_END,          NS_COMPOSITION_EVENT_START + 1)
// NS_COMPOSITION_UPDATE is the message for DOM compositionupdate event.
// This event should NOT be dispatched from widget since it will be dispatched
// by mozilla::TextComposition automatically if NS_COMPOSITION_CHANGE event
// will change composition string.
NS_EVENT_MESSAGE(NS_COMPOSITION_UPDATE,       NS_COMPOSITION_EVENT_START + 2)
// NS_COMPOSITION_CHANGE is the message for representing a change of
// composition string.  This should be dispatched from widget even if
// composition string isn't changed but the ranges are changed.  This causes
// a DOM "text" event which is a non-standard DOM event.
NS_EVENT_MESSAGE(NS_COMPOSITION_CHANGE,       NS_COMPOSITION_EVENT_START + 3)
// NS_COMPOSITION_COMMIT_AS_IS is the message for representing a commit of
// composition string.  TextComposition will commit composition with the
// last data.  TextComposition will dispatch this event to the DOM tree as
// NS_COMPOSITION_CHANGE without clause information.  After that,
// NS_COMPOSITION_END will be dispatched automatically.
// Its mData and mRanges should be empty and nullptr.
NS_EVENT_MESSAGE(NS_COMPOSITION_COMMIT_AS_IS, NS_COMPOSITION_EVENT_START + 4)
// NS_COMPOSITION_COMMIT is the message for representing a commit of
// composition string with its mData value.  TextComposition will dispatch this
// event to the DOM tree as NS_COMPOSITION_CHANGE without clause information.
// After that, NS_COMPOSITION_END will be dispatched automatically.
// Its mRanges should be nullptr.
NS_EVENT_MESSAGE(NS_COMPOSITION_COMMIT,       NS_COMPOSITION_EVENT_START + 5)

// UI events
NS_EVENT_MESSAGE(NS_UI_EVENT_START,     2500)
// this is not to be confused with NS_ACTIVATE!
NS_EVENT_MESSAGE(NS_UI_ACTIVATE,        NS_UI_EVENT_START)
NS_EVENT_MESSAGE(NS_UI_FOCUSIN,         NS_UI_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_UI_FOCUSOUT,        NS_UI_EVENT_START + 2)

// pagetransition events
NS_EVENT_MESSAGE(NS_PAGETRANSITION_START, 2700)
NS_EVENT_MESSAGE(NS_PAGE_SHOW,          NS_PAGETRANSITION_START + 1)
NS_EVENT_MESSAGE(NS_PAGE_HIDE,          NS_PAGETRANSITION_START + 2)

// SVG events
NS_EVENT_MESSAGE(NS_SVG_EVENT_START,    2800)
NS_EVENT_MESSAGE(NS_SVG_LOAD,           NS_SVG_EVENT_START)
NS_EVENT_MESSAGE(NS_SVG_UNLOAD,         NS_SVG_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_SVG_ABORT,          NS_SVG_EVENT_START + 2)
NS_EVENT_MESSAGE(NS_SVG_ERROR,          NS_SVG_EVENT_START + 3)
NS_EVENT_MESSAGE(NS_SVG_RESIZE,         NS_SVG_EVENT_START + 4)
NS_EVENT_MESSAGE(NS_SVG_SCROLL,         NS_SVG_EVENT_START + 5)

// SVG Zoom events
NS_EVENT_MESSAGE(NS_SVGZOOM_EVENT_START, 2900)
NS_EVENT_MESSAGE(NS_SVG_ZOOM,           NS_SVGZOOM_EVENT_START)

// XUL command events
NS_EVENT_MESSAGE(NS_XULCOMMAND_EVENT_START, 3000)
NS_EVENT_MESSAGE(NS_XUL_COMMAND,        NS_XULCOMMAND_EVENT_START)

// Cut, copy, paste events
NS_EVENT_MESSAGE(NS_CUTCOPYPASTE_EVENT_START, 3100)
NS_EVENT_MESSAGE(NS_COPY,               NS_CUTCOPYPASTE_EVENT_START)
NS_EVENT_MESSAGE(NS_CUT,                NS_CUTCOPYPASTE_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_PASTE,              NS_CUTCOPYPASTE_EVENT_START + 2)

// Query the content information
NS_EVENT_MESSAGE(NS_QUERY_CONTENT_EVENT_START,       3200)
// Query for the selected text information, it return the selection offset,
// selection length and selected text.
NS_EVENT_MESSAGE(NS_QUERY_SELECTED_TEXT,             NS_QUERY_CONTENT_EVENT_START)
// Query for the text content of specified range, it returns actual lengh (if
// the specified range is too long) and the text of the specified range.
// Returns the entire text if requested length > actual length.
NS_EVENT_MESSAGE(NS_QUERY_TEXT_CONTENT,              NS_QUERY_CONTENT_EVENT_START + 1)
// Query for the caret rect of nth insertion point. The offset of the result is
// relative position from the top level widget.
NS_EVENT_MESSAGE(NS_QUERY_CARET_RECT,                NS_QUERY_CONTENT_EVENT_START + 3)
// Query for the bounding rect of a range of characters. This works on any
// valid character range given offset and length. Result is relative to top
// level widget coordinates
NS_EVENT_MESSAGE(NS_QUERY_TEXT_RECT,                 NS_QUERY_CONTENT_EVENT_START + 4)
// Query for the bounding rect of the current focused frame. Result is relative
// to top level widget coordinates
NS_EVENT_MESSAGE(NS_QUERY_EDITOR_RECT,               NS_QUERY_CONTENT_EVENT_START + 5)
// Query for the current state of the content. The particular members of
// mReply that are set for each query content event will be valid on success.
NS_EVENT_MESSAGE(NS_QUERY_CONTENT_STATE,             NS_QUERY_CONTENT_EVENT_START + 6)
// Query for the selection in the form of a nsITransferable.
NS_EVENT_MESSAGE(NS_QUERY_SELECTION_AS_TRANSFERABLE, NS_QUERY_CONTENT_EVENT_START + 7)
// Query for character at a point.  This returns the character offset, its
// rect and also tentative caret point if the point is clicked.  The point is
// specified by Event::refPoint.
NS_EVENT_MESSAGE(NS_QUERY_CHARACTER_AT_POINT,        NS_QUERY_CONTENT_EVENT_START + 8)
// Query if the DOM element under Event::refPoint belongs to our widget
// or not.
NS_EVENT_MESSAGE(NS_QUERY_DOM_WIDGET_HITTEST,        NS_QUERY_CONTENT_EVENT_START + 9)

// Video events
NS_EVENT_MESSAGE(NS_MEDIA_EVENT_START,  3300)
NS_EVENT_MESSAGE(NS_LOADSTART,          NS_MEDIA_EVENT_START)
NS_EVENT_MESSAGE(NS_PROGRESS,           NS_MEDIA_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_SUSPEND,            NS_MEDIA_EVENT_START + 2)
NS_EVENT_MESSAGE(NS_EMPTIED,            NS_MEDIA_EVENT_START + 3)
NS_EVENT_MESSAGE(NS_STALLED,            NS_MEDIA_EVENT_START + 4)
NS_EVENT_MESSAGE(NS_PLAY,               NS_MEDIA_EVENT_START + 5)
NS_EVENT_MESSAGE(NS_PAUSE,              NS_MEDIA_EVENT_START + 6)
NS_EVENT_MESSAGE(NS_LOADEDMETADATA,     NS_MEDIA_EVENT_START + 7)
NS_EVENT_MESSAGE(NS_LOADEDDATA,         NS_MEDIA_EVENT_START + 8)
NS_EVENT_MESSAGE(NS_WAITING,            NS_MEDIA_EVENT_START + 9)
NS_EVENT_MESSAGE(NS_PLAYING,            NS_MEDIA_EVENT_START + 10)
NS_EVENT_MESSAGE(NS_CANPLAY,            NS_MEDIA_EVENT_START + 11)
NS_EVENT_MESSAGE(NS_CANPLAYTHROUGH,     NS_MEDIA_EVENT_START + 12)
NS_EVENT_MESSAGE(NS_SEEKING,            NS_MEDIA_EVENT_START + 13)
NS_EVENT_MESSAGE(NS_SEEKED,             NS_MEDIA_EVENT_START + 14)
NS_EVENT_MESSAGE(NS_TIMEUPDATE,         NS_MEDIA_EVENT_START + 15)
NS_EVENT_MESSAGE(NS_ENDED,              NS_MEDIA_EVENT_START + 16)
NS_EVENT_MESSAGE(NS_RATECHANGE,         NS_MEDIA_EVENT_START + 17)
NS_EVENT_MESSAGE(NS_DURATIONCHANGE,     NS_MEDIA_EVENT_START + 18)
NS_EVENT_MESSAGE(NS_VOLUMECHANGE,       NS_MEDIA_EVENT_START + 19)
NS_EVENT_MESSAGE(NS_NEED_KEY,           NS_MEDIA_EVENT_START + 20)

// paint notification events
NS_EVENT_MESSAGE(NS_NOTIFYPAINT_START,  3400)
NS_EVENT_MESSAGE(NS_AFTERPAINT,         NS_NOTIFYPAINT_START)

// Simple gesture events
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_EVENT_START,    3500)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_SWIPE_MAY_START,NS_SIMPLE_GESTURE_EVENT_START)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_SWIPE_START,    NS_SIMPLE_GESTURE_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_SWIPE_UPDATE,   NS_SIMPLE_GESTURE_EVENT_START + 2)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_SWIPE_END,      NS_SIMPLE_GESTURE_EVENT_START + 3)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_SWIPE,          NS_SIMPLE_GESTURE_EVENT_START + 4)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_MAGNIFY_START,  NS_SIMPLE_GESTURE_EVENT_START + 5)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_MAGNIFY_UPDATE, NS_SIMPLE_GESTURE_EVENT_START + 6)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_MAGNIFY,        NS_SIMPLE_GESTURE_EVENT_START + 7)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_ROTATE_START,   NS_SIMPLE_GESTURE_EVENT_START + 8)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_ROTATE_UPDATE,  NS_SIMPLE_GESTURE_EVENT_START + 9)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_ROTATE,         NS_SIMPLE_GESTURE_EVENT_START + 10)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_TAP,            NS_SIMPLE_GESTURE_EVENT_START + 11)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_PRESSTAP,       NS_SIMPLE_GESTURE_EVENT_START + 12)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_EDGE_STARTED,   NS_SIMPLE_GESTURE_EVENT_START + 13)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_EDGE_CANCELED,  NS_SIMPLE_GESTURE_EVENT_START + 14)
NS_EVENT_MESSAGE(NS_SIMPLE_GESTURE_EDGE_COMPLETED, NS_SIMPLE_GESTURE_EVENT_START + 15)

// These are used to send native events to plugins.
NS_EVENT_MESSAGE(NS_PLUGIN_EVENT_START, 3600)
NS_EVENT_MESSAGE(NS_PLUGIN_INPUT_EVENT, NS_PLUGIN_EVENT_START)
NS_EVENT_MESSAGE(NS_PLUGIN_FOCUS_EVENT, NS_PLUGIN_EVENT_START + 1)

// Events to manipulate selection (WidgetSelectionEvent)
NS_EVENT_MESSAGE(NS_SELECTION_EVENT_START, 3700)
// Clear any previous selection and set the given range as the selection
NS_EVENT_MESSAGE(NS_SELECTION_SET,      NS_SELECTION_EVENT_START)

// Events of commands for the contents
NS_EVENT_MESSAGE(NS_CONTENT_COMMAND_EVENT_START,        3800)
NS_EVENT_MESSAGE(NS_CONTENT_COMMAND_CUT,                NS_CONTENT_COMMAND_EVENT_START)
NS_EVENT_MESSAGE(NS_CONTENT_COMMAND_COPY,               NS_CONTENT_COMMAND_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_CONTENT_COMMAND_PASTE,              NS_CONTENT_COMMAND_EVENT_START + 2)
NS_EVENT_MESSAGE(NS_CONTENT_COMMAND_DELETE,             NS_CONTENT_COMMAND_EVENT_START + 3)
NS_EVENT_MESSAGE(NS_CONTENT_COMMAND_UNDO,               NS_CONTENT_COMMAND_EVENT_START + 4)
NS_EVENT_MESSAGE(NS_CONTENT_COMMAND_REDO,               NS_CONTENT_COMMAND_EVENT_START + 5)
NS_EVENT_MESSAGE(NS_CONTENT_COMMAND_PASTE_TRANSFERABLE, NS_CONTENT_COMMAND_EVENT_START + 6)
// NS_CONTENT_COMMAND_SCROLL scrolls the nearest scrollable element to the
// currently focused content or latest DOM selection. This would normally be
// the same element scrolled by keyboard scroll commands, except that this event
// will scroll an element scrollable in either direction.  I.e., if the nearest
// scrollable ancestor element can only be scrolled vertically, and horizontal
// scrolling is requested using this event, no scrolling will occur.
NS_EVENT_MESSAGE(NS_CONTENT_COMMAND_SCROLL,             NS_CONTENT_COMMAND_EVENT_START+7)

// Event to gesture notification
NS_EVENT_MESSAGE(NS_GESTURENOTIFY_EVENT_START, 3900)

NS_EVENT_MESSAGE(NS_ORIENTATION_EVENT,  4000)

NS_EVENT_MESSAGE(NS_SCROLLAREA_EVENT_START, 4100)
NS_EVENT_MESSAGE(NS_SCROLLEDAREACHANGED, NS_SCROLLAREA_EVENT_START)

NS_EVENT_MESSAGE(NS_TRANSITION_EVENT_START, 4200)
NS_EVENT_MESSAGE(NS_TRANSITION_END,     NS_TRANSITION_EVENT_START)

NS_EVENT_MESSAGE(eAnimationEventFirst,   4250)
NS_EVENT_MESSAGE(NS_ANIMATION_START,     eAnimationEventFirst)
NS_EVENT_MESSAGE(NS_ANIMATION_END,       eAnimationEventFirst + 1)
NS_EVENT_MESSAGE(NS_ANIMATION_ITERATION, eAnimationEventFirst + 2)

NS_EVENT_MESSAGE(NS_SMIL_TIME_EVENT_START, 4300)
NS_EVENT_MESSAGE(NS_SMIL_BEGIN,         NS_SMIL_TIME_EVENT_START)
NS_EVENT_MESSAGE(NS_SMIL_END,           NS_SMIL_TIME_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_SMIL_REPEAT,        NS_SMIL_TIME_EVENT_START + 2)

NS_EVENT_MESSAGE(NS_WEBAUDIO_EVENT_START, 4350)
NS_EVENT_MESSAGE(NS_AUDIO_PROCESS,      NS_WEBAUDIO_EVENT_START)
NS_EVENT_MESSAGE(NS_AUDIO_COMPLETE,     NS_WEBAUDIO_EVENT_START + 1)

// script notification events
NS_EVENT_MESSAGE(NS_NOTIFYSCRIPT_START,    4500)
NS_EVENT_MESSAGE(NS_BEFORE_SCRIPT_EXECUTE, NS_NOTIFYSCRIPT_START)
NS_EVENT_MESSAGE(NS_AFTER_SCRIPT_EXECUTE,  NS_NOTIFYSCRIPT_START + 1)

NS_EVENT_MESSAGE(NS_PRINT_EVENT_START,  4600)
NS_EVENT_MESSAGE(NS_BEFOREPRINT,        NS_PRINT_EVENT_START)
NS_EVENT_MESSAGE(NS_AFTERPRINT,         NS_PRINT_EVENT_START + 1)

NS_EVENT_MESSAGE(NS_MESSAGE_EVENT_START, 4700)
NS_EVENT_MESSAGE(NS_MESSAGE,            NS_MESSAGE_EVENT_START)

// Open and close events
NS_EVENT_MESSAGE(NS_OPENCLOSE_EVENT_START, 4800)
NS_EVENT_MESSAGE(NS_OPEN,                NS_OPENCLOSE_EVENT_START)
NS_EVENT_MESSAGE(NS_CLOSE,               NS_OPENCLOSE_EVENT_START+1)

// Device motion and orientation
NS_EVENT_MESSAGE(NS_DEVICE_ORIENTATION_START, 4900)
NS_EVENT_MESSAGE(NS_DEVICE_ORIENTATION,  NS_DEVICE_ORIENTATION_START)
NS_EVENT_MESSAGE(NS_DEVICE_MOTION,       NS_DEVICE_ORIENTATION_START + 1)
NS_EVENT_MESSAGE(NS_DEVICE_PROXIMITY,    NS_DEVICE_ORIENTATION_START + 2)
NS_EVENT_MESSAGE(NS_USER_PROXIMITY,      NS_DEVICE_ORIENTATION_START + 3)
NS_EVENT_MESSAGE(NS_DEVICE_LIGHT,        NS_DEVICE_ORIENTATION_START + 4)

NS_EVENT_MESSAGE(NS_SHOW_EVENT,          5000)

// Fullscreen DOM API
NS_EVENT_MESSAGE(NS_FULL_SCREEN_START,   5100)
NS_EVENT_MESSAGE(NS_FULLSCREENCHANGE,    NS_FULL_SCREEN_START)
NS_EVENT_MESSAGE(NS_FULLSCREENERROR,     NS_FULL_SCREEN_START + 1)

NS_EVENT_MESSAGE(NS_TOUCH_EVENT_START,   5200)
NS_EVENT_MESSAGE(NS_TOUCH_START,         NS_TOUCH_EVENT_START)
NS_EVENT_MESSAGE(NS_TOUCH_MOVE,          NS_TOUCH_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_TOUCH_END,           NS_TOUCH_EVENT_START + 2)
NS_EVENT_MESSAGE(NS_TOUCH_CANCEL,        NS_TOUCH_EVENT_START + 3)

// Pointerlock DOM API
NS_EVENT_MESSAGE(NS_POINTERLOCK_START,   5300)
NS_EVENT_MESSAGE(NS_POINTERLOCKCHANGE,   NS_POINTERLOCK_START)
NS_EVENT_MESSAGE(NS_POINTERLOCKERROR,    NS_POINTERLOCK_START + 1)

NS_EVENT_MESSAGE(NS_WHEEL_EVENT_START,   5400)
NS_EVENT_MESSAGE(NS_WHEEL_WHEEL,         NS_WHEEL_EVENT_START)
NS_EVENT_MESSAGE(NS_WHEEL_START,         NS_WHEEL_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_WHEEL_STOP,          NS_WHEEL_EVENT_START + 2)

//System time is changed
NS_EVENT_MESSAGE(NS_MOZ_TIME_CHANGE_EVENT, 5500)

// Network packet events.
NS_EVENT_MESSAGE(NS_NETWORK_EVENT_START,    5600)
NS_EVENT_MESSAGE(NS_NETWORK_UPLOAD_EVENT,   NS_NETWORK_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_NETWORK_DOWNLOAD_EVENT, NS_NETWORK_EVENT_START + 2)

// MediaRecorder events.
NS_EVENT_MESSAGE(NS_MEDIARECORDER_EVENT_START, 5700)
NS_EVENT_MESSAGE(NS_MEDIARECORDER_DATAAVAILABLE, NS_MEDIARECORDER_EVENT_START + 1)
NS_EVENT_MESSAGE(NS_MEDIARECORDER_WARNING,       NS_MEDIARECORDER_EVENT_START + 2)
NS_EVENT_MESSAGE(NS_MEDIARECORDER_STOP,          NS_MEDIARECORDER_EVENT_START + 3)

// SpeakerManager events
NS_EVENT_MESSAGE(NS_SPEAKERMANAGER_EVENT_START, 5800)
NS_EVENT_MESSAGE(NS_SPEAKERMANAGER_SPEAKERFORCEDCHANGE, NS_SPEAKERMANAGER_EVENT_START + 1)

#ifdef MOZ_GAMEPAD
// Gamepad input events
NS_EVENT_MESSAGE(NS_GAMEPAD_START,        6000)
NS_EVENT_MESSAGE(NS_GAMEPAD_BUTTONDOWN,   NS_GAMEPAD_START)
NS_EVENT_MESSAGE(NS_GAMEPAD_BUTTONUP,     NS_GAMEPAD_START + 1)
NS_EVENT_MESSAGE(NS_GAMEPAD_AXISMOVE,     NS_GAMEPAD_START + 2)
NS_EVENT_MESSAGE(NS_GAMEPAD_CONNECTED,    NS_GAMEPAD_START + 3)
NS_EVENT_MESSAGE(NS_GAMEPAD_DISCONNECTED, NS_GAMEPAD_START + 4)
// Keep this defined to the same value as the event above
NS_EVENT_MESSAGE(NS_GAMEPAD_END,          NS_GAMEPAD_START + 4)
#endif

// input and beforeinput events.
NS_EVENT_MESSAGE(NS_EDITOR_EVENT_START,   6100)
NS_EVENT_MESSAGE(NS_EDITOR_INPUT,         NS_EDITOR_EVENT_START)

// Selection events
NS_EVENT_MESSAGE(NS_SELECT_EVENT_START,   6200)
NS_EVENT_MESSAGE(NS_SELECT_START,         NS_SELECT_EVENT_START)
NS_EVENT_MESSAGE(NS_SELECTION_CHANGE,     NS_SELECT_EVENT_START + 1)

// Visibility change
NS_EVENT_MESSAGE(NS_VISIBILITY_START,     6300)
NS_EVENT_MESSAGE(NS_VISIBILITY_CHANGE,    NS_VISIBILITY_START + 1)

// Details and Summary events.
NS_EVENT_MESSAGE(NS_DETAILS_SUMMARY_EVENT_START,   6400)
NS_EVENT_MESSAGE(NS_TOGGLE,                        NS_DETAILS_SUMMARY_EVENT_START)
