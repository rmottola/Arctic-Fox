/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set ts=2 et sw=2 tw=80: */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include protocol PContent;

using struct nsIntRect from "nsRect.h";

namespace mozilla {
namespace a11y {

struct AccessibleData
{
  uint64_t ID;
  uint32_t Role;
  uint32_t ChildrenCount;
  uint32_t Interfaces;
};

struct ShowEventData
{
  uint64_t ID;
  uint32_t Idx;
  AccessibleData[] NewTree;
};

struct Attribute
{
  nsCString Name;
  nsString Value;
};

struct RelationTargets
{
  uint32_t Type;
  uint64_t[] Targets;
};

prio(normal upto high) sync protocol PDocAccessible
{
  manager PContent;

parent:
  __delete__();

  /*
   * Notify the parent process the document in the child process is firing an
   * event.
   */
  Event(uint64_t aID, uint32_t type);
  ShowEvent(ShowEventData data);
  HideEvent(uint64_t aRootID);

child:
  // Accessible
  prio(high) sync State(uint64_t aID) returns(uint64_t states);
  prio(high) sync Name(uint64_t aID) returns(nsString name);
  prio(high) sync Value(uint64_t aID) returns(nsString value);
  prio(high) sync Description(uint64_t aID) returns(nsString desc);
  prio(high) sync Attributes(uint64_t aID) returns(Attribute[] attributes);
  prio(high) sync RelationByType(uint64_t aID, uint32_t aRelationType)
    returns(uint64_t[] targets);
  prio(high) sync Relations(uint64_t aID) returns(RelationTargets[] relations);

  // AccessibleText

  // TextSubstring is getText in IDL.
  prio(high) sync CharacterCount(uint64_t aID) returns(int32_t aCount);
  prio(high) sync SelectionCount(uint64_t aID) returns(int32_t aCount);
  prio(high) sync TextSubstring(uint64_t aID, int32_t aStartOffset, int32_t
                                aEndOffset) returns(nsString aText);
  prio(high) sync GetTextAfterOffset(uint64_t aID, int32_t aOffset, int32_t aBoundaryType)
    returns(nsString aText, int32_t aStartOffset, int32_t aEndOffset);
  prio(high) sync GetTextAtOffset(uint64_t aID, int32_t aOffset, int32_t aBoundaryType)
    returns(nsString aText, int32_t aStartOffset, int32_t aEndOffset);

  prio(high) sync GetTextBeforeOffset(uint64_t aID, int32_t aOffset, int32_t aBoundaryType)
    returns(nsString aText, int32_t aStartOffset, int32_t aEndOffset);

  prio(high) sync TextAttributes(uint64_t aID, bool aIncludeDefAttrs, int32_t aOffset)
    returns(Attribute[] aAttributes, int32_t aStartOffset, int32_t aEndOffset);
  prio(high) sync DefaultTextAttributes(uint64_t aID) returns(Attribute[] aAttributes);

  prio(high) sync TextBounds(uint64_t aID, int32_t aStartOffset, int32_t aEndOffset,
                             uint32_t aCoordType)
    returns(nsIntRect aRetVal);
  prio(high) sync CharBounds(uint64_t aID, int32_t aOffset, uint32_t aCoordType)
    returns(nsIntRect aRetVal);

  prio(high) sync OffsetAtPoint(uint64_t aID, int32_t aX, int32_t aY, uint32_t aCoordType)
    returns(int32_t aRetVal);

  prio(high) sync SelectionBoundsAt(uint64_t aID, int32_t aSelectionNum)
    returns(bool aSucceeded, nsString aData, int32_t aStartOffset, int32_t aEndOffset);
  prio(high) sync SetSelectionBoundsAt(uint64_t aID, int32_t aSelectionNum,
                                       int32_t aStartOffset, int32_t aEndOffset)
    returns(bool aSucceeded);
  prio(high) sync AddToSelection(uint64_t aID, int32_t aStartOffset, int32_t aEndOffset)
    returns(bool aSucceeded);
  prio(high) sync RemoveFromSelection(uint64_t aID, int32_t aSelectionNum)
    returns(bool aSucceeded);

  ScrollSubstringTo(uint64_t aID, int32_t aStartOffset, int32_t aEndOffset,
                    uint32_t aScrollType);
  ScrollSubstringToPoint(uint64_t aID,
                         int32_t aStartOffset,
                         int32_t aEndOffset,
                         uint32_t aCoordinateType,
                         int32_t aX, int32_t aY);

  prio(high) sync ReplaceText(uint64_t aID, nsString aText);
  prio(high) sync InsertText(uint64_t aID, nsString aText, int32_t aPosition);
  prio(high) sync CopyText(uint64_t aID, int32_t aStartPos, int32_t aEndPos);
  prio(high) sync CutText(uint64_t aID, int32_t aStartPos, int32_t aEndPos);
  prio(high) sync DeleteText(uint64_t aID, int32_t aStartPos, int32_t aEndPos);
  prio(high) sync PasteText(uint64_t aID, int32_t aPosition);
};

}
}
